{
  "address": "0x823179eDB6C0862f34E9036E0058311cB6F9E175",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "_randomNumbers",
      "outputs": [
        {
          "internalType": "contract IRNG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventResult",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lockBlock",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec41717d5d54dd4153afbd97cf257645bc96e04dac941500d779b4e9937558cf",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x823179eDB6C0862f34E9036E0058311cB6F9E175",
    "transactionIndex": 0,
    "gasUsed": "179237",
    "logsBloom": "0x
    "blockHash": "0xf9462d379c53d02f6c92bd76bb4f168fa020631fedd30e4b881d2c4f78e7e752",
    "transactionHash": "0xec41717d5d54dd4153afbd97cf257645bc96e04dac941500d779b4e9937558cf",
    "logs": [],
    "blockNumber": 5527559,
    "cumulativeGasUsed": "179237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd2277640542b773a9bb850422c0b310",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_randomNumbers\",\"outputs\":[{\"internalType\":\"contract IRNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getEventResult\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Oracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./interfaces/IRNG.sol\\\";\\n\\ncontract Oracle {\\n    IRNG public _randomNumbers;\\n\\n    constructor() {\\n        address randomService = 0x1cDC2A4fF8d374D91a1161C142cc496FBF5547Ec;\\n        _randomNumbers = IRNG(randomService);\\n    }\\n\\n    function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock) {\\n        return _randomNumbers.requestRandomNumber();\\n    }\\n\\n    function getEventResult(uint256 eventId) external returns (uint8) {\\n        //(uint32 requestId,)  = _randomNumbers.requestRandomNumber();\\n        // uint256 randomNumber = _randomNumbers.randomNumber(requestId);\\n        // uint256 result = randomNumber % 3;\\n        return 2;\\n    }\\n}\\n\",\"keccak256\":\"0xf25ee378879a984b3cce9c6b932939bdff0fc3fa4ce00e0d82ecb2ce97aa215a\"},\"contracts/interfaces/IRNG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @title Random Number Generator Interface\\n * @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\\n */\\ninterface IRNG {\\n    /**\\n     * @notice Emitted when a new request for a random number has been submitted\\n     * @param requestId The indexed ID of the request used to get the results of the RNG service\\n     * @param sender The indexed address of the sender of the request\\n     */\\n    event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when an existing request for a random number has been completed\\n     * @param requestId The indexed ID of the request used to get the results of the RNG service\\n     * @param randomNumber The random number produced by the 3rd-party service\\n     */\\n    event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\\n\\n    /**\\n     * @notice Gets the last request id used by the RNG service\\n     * @return requestId The last request id used in the last request\\n     */\\n    function getLastRequestId() external view returns (uint32 requestId);\\n\\n    /**\\n     * @notice Gets the Fee for making a Request against an RNG service\\n     * @return feeToken The address of the token that is used to pay fees\\n     * @return requestFee The fee required to be paid to make a request\\n     */\\n    function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\n\\n    /**\\n     * @notice Sends a request for a random number to the 3rd-party service\\n     * @dev Some services will complete the request immediately, others may have a time-delay\\n     * @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n     * @return requestId The ID of the request used to get the results of the RNG service\\n     * @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.\\n     * The calling contract should \\\"lock\\\" all activity until the result is available via the `requestId`\\n     */\\n    function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\\n\\n    /**\\n     * @notice Checks if the request for randomness from the 3rd-party service has completed\\n     * @dev For time-delayed requests, this function is used to check/confirm completion\\n     * @param requestId The ID of the request used to get the results of the RNG service\\n     * @return isCompleted True if the request has completed and a random number is available, false otherwise\\n     */\\n    function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\\n\\n    /**\\n     * @notice Gets the random number produced by the 3rd-party service\\n     * @param requestId The ID of the request used to get the results of the RNG service\\n     * @return randomNum The random number\\n     */\\n    function randomNumber(uint32 requestId) external returns (uint256 randomNum);\\n}\\n\",\"keccak256\":\"0x5b9a7f68d6cda938e495a6c6cdc63e0b1ea4260a91c3c1bf6baffbb7eafca0f4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916731cdc2a4ff8d374d91a1161c142cc496fbf5547ec1790556101de806100466000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063246127f6146100465780638678a7b214610076578063c60d2d8f1461009b575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100c1565b6040805163ffffffff93841681529290911660208301520161006d565b6100af6100a936600461015c565b50600290565b60405160ff909116815260200161006d565b600080546040805163433c53d960e11b8152815184936001600160a01b031692638678a7b2926004808201939182900301818787803b15801561010357600080fd5b505af1158015610117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013b9190610175565b915091509091565b805163ffffffff8116811461015757600080fd5b919050565b60006020828403121561016e57600080fd5b5035919050565b6000806040838503121561018857600080fd5b61019183610143565b915061019f60208401610143565b9050925092905056fea2646970667358221220f895c66531ab9f29f70043bb19a17c5cc4ae803293cf9b7f1e1b21d161cb52fb64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063246127f6146100465780638678a7b214610076578063c60d2d8f1461009b575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100c1565b6040805163ffffffff93841681529290911660208301520161006d565b6100af6100a936600461015c565b50600290565b60405160ff909116815260200161006d565b600080546040805163433c53d960e11b8152815184936001600160a01b031692638678a7b2926004808201939182900301818787803b15801561010357600080fd5b505af1158015610117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013b9190610175565b915091509091565b805163ffffffff8116811461015757600080fd5b919050565b60006020828403121561016e57600080fd5b5035919050565b6000806040838503121561018857600080fd5b61019183610143565b915061019f60208401610143565b9050925092905056fea2646970667358221220f895c66531ab9f29f70043bb19a17c5cc4ae803293cf9b7f1e1b21d161cb52fb64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 140,
        "contract": "contracts/Oracle.sol:Oracle",
        "label": "_randomNumbers",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRNG)454"
      }
    ],
    "types": {
      "t_contract(IRNG)454": {
        "encoding": "inplace",
        "label": "contract IRNG",
        "numberOfBytes": "20"
      }
    }
  }
}